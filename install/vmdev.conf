upstream app_server_libreclinica {
    # fail_timeout=0 means we always retry an upstream even if it failed
    # to return a good HTTP response

    # for UNIX domain socket setups
    server 127.0.0.1:8080 fail_timeout=0;

    # for a TCP configuration
    # server 192.168.0.7:8000 fail_timeout=0;
}


server {
    #if ($host = vmdev.alagant.com) {
    #    return 301 https://$host$request_uri;
    #} # managed by Certbot
    server_name vmdev.alagant.com;
    #return 404; # managed by Certbot

    location / {
        add_header X-Frame-Options SAMEORIGIN always;
        try_files $uri @proxy_to_libreclinica_app;
    }

    location @proxy_to_libreclinica_app {
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header Host $http_host;
        proxy_set_header X-Frame-Options SAMEORIGIN;
        # we don't want nginx trying to do something clever with
        # redirects, we set the Host: header above already.
        #rewrite (.*) /LibreClinica/$1;
        proxy_redirect off;
        proxy_pass http://app_server_libreclinica;
        #proxy_pass http://127.0.0.1:8080;
        #proxy_pass http://127.0.0.1:8080/LibreClinica/;
    }


    listen [::]:443 ssl; # managed by Certbot
    listen 443 ssl; # managed by Certbot
    ssl_certificate /etc/letsencrypt/live/vmdev.alagant.com/fullchain.pem; # managed by Certbot
    ssl_certificate_key /etc/letsencrypt/live/vmdev.alagant.com/privkey.pem; # managed by Certbot
    include /etc/letsencrypt/options-ssl-nginx.conf; # managed by Certbot
    ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem; # managed by Certbot

}


server {
    if ($host = vmdev.alagant.com) {
        return 301 https://$host$request_uri;
    } # managed by Certbot






    listen       80 ;
    listen       [::]:80 ;
    server_name vmdev.alagant.com;
    return 404; # managed by Certbot


}