trigger:
  - develop
  #Commits to an environment that is the playground for developers.
  #No data should be considered safe here against corruption or loss.
  #Esto es una prueba

pool:
  name: Development

resources:
  repositories:
    - repository: LcRepo
      type: github
      endpoint: Alagant
      name: Alagant/LibreClinica
      ref: refs/heads/$(Build.SourceBranchName)
    - repository: LcQA
      type: github
      endpoint: Alagant
      name: Alagant/libreclinica-qa
      ref: refs/heads/main
    - repository: LcDMM
      type: github
      endpoint: Alagant
      name: Alagant/libreclinica_drug_trial_module
      ref: refs/heads/main
    - repository: CDCOauthMockup
      type: github
      endpoint: Alagant
      name: Alagant/cdc_oauth_portal_mockup
      ref: refs/heads/main
    - repository: CDCCTMSLibreClinica
      type: github
      endpoint: Alagant
      name: Alagant/CDC_CTMS_LibreClinica
      ref: refs/heads/merged-changes
    - repository: LCProjects
      type: github
      endpoint: Alagant
      name: Alagant/LC_projects
      ref: refs/heads/master


variables:
#- tag: '$(Build.BuildId)'
- group: 'Confluence'
- group: 'Lc_root_access'
- group: 'Libreclinica_postgres'
- group: 'Email credentials'
- name: ENVIRONMENT
  value: development

stages:
- stage: DevOps
  displayName: Docker image
  jobs:
  - job: DevOps
    steps:
    - checkout: LcRepo
      clean: true
      persistCredentials: true
      fetchDepth: 1
      lfs: true
      #submodules: true
      #ref: refs/heads/lc-release-1.2.1
    - checkout: LcQA
    - checkout: LcDMM
    - checkout: CDCOauthMockup
    - checkout: CDCCTMSLibreClinica
    - checkout: LCProjects
    - task: Bash@3
      displayName: Create env files
      inputs:
        targetType: 'inline'
        script: |
          cd LC_projects/CDC_CTMS_LibreClinica
          echo -e "ADMINEMAIL=$(adminEmail)\nMAILUSERNAME=$(mailUsername)\nDEVELOPEREMAILS=$(developerEmails)">.env_emails
    - task: Bash@3
      displayName: Backup the database
      inputs:
        targetType: 'inline'
        script: |
          ./LC_projects/CDC_CTMS_LibreClinica/install/db_backup.bash
      continueOnError: true
    - task: Bash@3
      displayName: Clean the docker environment
      inputs:
        targetType: 'inline'
        script: |
          cd LibreClinica/
          docker compose down
          docker container stop $(docker container ls -aq)||echo No Docker containers to stop
          docker container prune -f
          docker image prune -af
          docker network prune -f
          docker system prune -af
          docker volume rm libreclinica_libreclinica_src libreclinica_libreclinica_webapps libreclinica_libreclinica_config libreclinica_mvn_cache libreclinica_libreclinica_src
          docker container prune -f
          docker image prune -af
          docker system prune -af

    - task: Bash@3
      displayName: DevOps
      inputs:
        targetType: 'inline'
        script: |
          # Docker DevOps
          echo user string ${USER}, for $(adminEmail), oe ${ADMINEMAIL}, mu ${MAILUSERNAME}
          # git clone https://github.com/Alagant/LC_projects
          # cd LC_projects
          # git remote show origin
          # cd ..
          ls -l
          pwd
          cd LC_projects
          git reset --hard origin/master
          git clean -d -f
          # cp /libreclinica/.env /CDC_CTMS_LibreClinica/.env
          ls -l
          pwd
          # git remote show origin
          
          git pull
          git submodule update --init --recursive
          git submodule foreach "git stash"
          git submodule foreach "git checkout master||git checkout main||git checkout lc-develop"
          git submodule foreach "git stash; git pull"
          echo "Status of submodules:"
          git submodule foreach --recursive git status
          
          # cd ~/Alagant_projects/LibreClinica/
          # git checkout $(Build.SourceBranchName)
          # echo checked out branch $(Build.SourceBranchName)
          
          echo Enter LibreClinica
          cd LibreClinica/
          git checkout develop
          git reset --hard origin/develop
          git clean -d -f
          echo checked out branch develop
          git pull
          echo running git status
          git status
          cd ..
          echo Exit LibreClinica
          
          # cp LibreClinica/.env CDC_CTMS_LibreClinica/.env
          # cp -a LibreClinica/install/. CDC_CTMS_LibreClinica/install/
          # cp LibreClinica/install/libreclinica.conf CDC_CTMS_LibreClinica/install/libreclinica.conf
          # cp LibreClinica/install/vmdev.conf CDC_CTMS_LibreClinica/install/vmdev.conf
          # cp LibreClinica/install/vmdev_wildcard_cert.conf CDC_CTMS_LibreClinica/install/vmdev_wildcard_cert.conf
          # echo ls CDC_CTMS_LibreClinica/install
          # ls CDC_CTMS_LibreClinica/install
          
          echo Enter CDC_CTMS_LibreClinica
          cd CDC_CTMS_LibreClinica/
          git checkout merged-changes
          git reset --hard origin/merged-changes
          git clean -d -f
          echo checked out branch merged-changes
          git pull
          echo running git status
          git status
          cd ..
          echo Exit CDC_CTMS_LibreClinica
          
          echo Copying Files
          cp LibreClinica/.env CDC_CTMS_LibreClinica/.env
          cp LibreClinica/install/*.conf CDC_CTMS_LibreClinica/install/
          ls CDC_CTMS_LibreClinica/install/
          
          echo Enter CDC_CTMS_LibreClinica
          cd CDC_CTMS_LibreClinica/
          pwd
          
          echo -e "ADMINEMAIL=$(adminEmail)\nMAILUSERNAME=$(mailUsername)\nDEVELOPEREMAILS=$(developerEmails)">.env_emails
          docker compose build --build-arg ENVIRONMENT=development --build-arg ADMIN_EMAIL=$(adminEmail) --build-arg MAIL_USERNAME=$(mailUsername) --build-arg MAIL_PASSWORD=${MAIL_PASSWORD} --build-arg MAIL_ERROR_MSG=${DEVELOPER_EMAILS}
          echo docker volume ls
          docker volume ls
          echo docker image ls
          docker image ls
          docker compose run libreclinica mvn -B clean install -DskipTests
          
          sudo cp /docker/volumes/cdc_ctms_libreclinica_libreclinica_src/_data/web/target/LibreClinica-web-1.3.1.war /docker/volumes/cdc_ctms_libreclinica_libreclinica_webapps/_data/LibreClinica.war
          docker compose up -d
          # If you need to paste in a new database, adapt and uncomment the following line:
          # sleep 10; sudo ./install/db_restore.bash ~/dbbackup/libreclinica_2024-05-06T22:45:01+00:00.sql
          # Be aware that the database restore script is not yet fully tested and may not work as expected.
          # cp ~/dbbackup/libreclinica_2024-05-06T22:45:01+00:00.sql libreclinica_backup.sql
          # chmod 777 libreclinica_2024-05-06T22:45:01+00:00.sql
          # docker compose run postgres psql -d postgres -U clinica -h postgres -c "DROP DATABASE IF EXISTS libreclinica;"
          # docker compose run postgres psql -d postgres -U clinica -h postgres -c "CREATE DATABASE libreclinica;"
          # docker compose run postgres pwd
          # docker compose run postgres ls
          # docker compose run postgres ls /dbbackup
          # docker compose run postgres find libreclinica_2024-05-06T22:45:01+00:00.sql
          # docker compose run postgres psql -d libreclinica -U clinica -h postgres -f /dbbackup/libreclinica_2024-05-06T22:45:01+00:00.sql
          
          docker ps -a
          echo 'Hello DevOps to $(adminEmail)'
          ls -ltra
          
          # cd ~/dbbackup/
          # ls -ltra
      env:
        MAILPASSWORD: $(mailPassword)

    - task: Bash@3
      displayName: Test and report commit message
      inputs:
        targetType: 'inline'
        script: |
          cd libreclinica-qa/
          docker compose build
          docker compose up libreclinica-qa
      # Change the comment text here to test a new commit.
      env:
        CONFLUENCE_USERNAME: $(CONFLUENCE_USERNAME)
        CONFLUENCE_ACCESS_TOKEN: $(CONFLUENCE_ACCESS_TOKEN)
        CONFLUENCE_SPACE_ID: $(CONFLUENCE_SPACE_ID)
        CONFLUENCE_PAGE_ID: $(CONFLUENCE_PAGE_ID)
        LC_ROOT_USERNAME: $(LC_ROOT_USERNAME)
        LC_ROOT_PASSWORD: $(LC_ROOT_PASSWORD)
        source_version: $(Build.SourceVersion)
        build_id: $(Build.BuildId)
        build_number: $(Build.BuildNumber)
        commit_message: $(Build.SourceVersionMessage)
        branch: $(Build.SourceBranchName)
        adminEmail: $(adminEmail)
        mailUsername: $(mailUsername)
        mailPassword: $(mailPassword)
        mailErrorMsg: $(developerEmails)
        BEHAVE_STAGE: develop