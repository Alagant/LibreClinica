trigger:
  - develop
  #Commits to an environment that is the playground for developers.
  #No data should be considered safe here against corruption or loss.

pool:
  name: Development

resources:
  repositories:
    - repository: LcRepo
      type: github
      endpoint: Alagant
      name: Alagant/LibreClinica
      ref: refs/heads/$(Build.SourceBranchName)
    - repository: LcQA
      type: github
      endpoint: Alagant
      name: Alagant/libreclinica-qa
      ref: refs/heads/main
    - repository: LcDMM
      type: github
      endpoint: Alagant
      name: Alagant/libreclinica_drug_trial_module
      ref: refs/heads/main
    - repository: CDCOauthMockup
      type: github
      endpoint: Alagant
      name: Alagant/cdc_oauth_portal_mockup
      ref: refs/heads/main


variables:
#- tag: '$(Build.BuildId)'
- group: 'Confluence'
- group: 'Lc_root_access'
- group: 'Libreclinica_postgres'
- group: 'Email credentials'
- name: ENVIRONMENT
  value: development

stages:
- stage: DevOps
  displayName: Docker image
  jobs:
  - job: DevOps
    steps:
    - checkout: LcRepo
      #clean: true
      persistCredentials: true
      fetchDepth: 1
      lfs: true
      #submodules: true
      #ref: refs/heads/lc-release-1.2.1
    - checkout: LcQA
    - checkout: LcDMM
    - checkout: CDCOauthMockup
    #- task: Bash@3
    #  displayName: Backup the database
    #  inputs:
    #    targetType: 'inline'
    #    script: |
    #      ./LibreClinica/docker/db_backup.bash
    #  continueOnError: true
    - task: Bash@3
      displayName: Clean the docker environment
      inputs:
        targetType: 'inline'
        script: |
          cd LibreClinica/
          docker compose down
          docker container stop $(docker container ls -aq)||echo No Docker containers to stop
          docker container prune -f
          docker image prune -f
          docker network prune -f
          docker system prune -af

    - task: Bash@3
      displayName: DevOps
      inputs:
        targetType: 'inline'
        script: |
          # Docker DevOps
          cd ~/Alagant_projects/
          echo user string ${USER}, for $(adminEmail), oe ${ADMINEMAIL}, mu ${MAILUSERNAME}
          git pull
          git submodule update --init --recursive
          git submodule foreach "git stash"
          git submodule foreach "git checkout master||git checkout main"
          git submodule foreach "git stash; git pull"
          echo "Status of submodules:"
          git submodule foreach --recursive git status
          cd ~/Alagant_projects/LibreClinica/
          git checkout $(Build.SourceBranchName)
          echo checked out branch $(Build.SourceBranchName)
          git pull
          echo running git status
          git status
          export JUELA=$(adminEmail)
          set
          
          docker compose build --build-arg ENVIRONMENT=development --build-arg ADMIN_EMAIL=$(adminEmail) --build-arg MAIL_USERNAME=$(mailUsername) --build-arg MAIL_PASSWORD=$(mailPassword) --build-arg MAIL_ERROR_MSG=$(developerEmails)
          docker compose run libreclinica mvn -B clean install -DskipTests>mvn.log
          cp /docker/volumes/libreclinica_libreclinica_src/_data/web/target/LibreClinica-web-1.3.1.war /docker/volumes/libreclinica_libreclinica_webapps/_data/
          docker compose up -d #--env ADMIN_EMAIL=$(adminEmail) --env MAIL_USERNAME=$(mailUsername) --env MAIL_PASSWORD=$(mailPassword) --env MAIL_ERROR_MSG=$(developerEmails)
          
          docker ps -a
          echo 'Hello DevOps to $(adminEmail)'
          ls -ltra
      #env:
      #  #ADMIN_EMAIL: $(adminEmail)
      #  MAIL_USERNAME: $(mailUsername)
      #  MAIL_PASSWORD: $(mailPassword)
      #  MAIL_ERROR_MSG: $(developerEmails)


    - task: Bash@3
      displayName: Test and report commit message
      inputs:
        targetType: 'inline'
        script: |
          cd libreclinica-qa/
          docker compose build
          docker compose up libreclinica-qa
      # Change the comment text here to test a new commit.
      env:
        CONFLUENCE_USERNAME: $(CONFLUENCE_USERNAME)
        CONFLUENCE_ACCESS_TOKEN: $(CONFLUENCE_ACCESS_TOKEN)
        CONFLUENCE_SPACE_ID: $(CONFLUENCE_SPACE_ID)
        CONFLUENCE_PAGE_ID: $(CONFLUENCE_PAGE_ID)
        LC_ROOT_USERNAME: $(LC_ROOT_USERNAME)
        LC_ROOT_PASSWORD: $(LC_ROOT_PASSWORD)
        source_version: $(Build.SourceVersion)
        build_id: $(Build.BuildId)
        build_number: $(Build.BuildNumber)
        commit_message: $(Build.SourceVersionMessage)
        branch: $(Build.SourceBranchName)
        adminEmail: $(adminEmail)
        mailUsername: $(mailUsername)
        mailPassword: $(mailPassword)
        mailErrorMsg: $(developerEmails)
        BEHAVE_STAGE: develop